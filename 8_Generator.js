//*******Generator Functions**********

//Generator functions in JavaScript are a special type of function that can be paused and 
//resumed during execution. They allow you to define an iterative algorithm by creating an 
//iterator object that generates a sequence of values over time. Generator functions are denoted 
//by using an asterisk (*) after the `function` keyword.

//To create a generator function, you use the `yield` keyword inside the function body to 
//specify the values that will be generated. When a `yield` statement is encountered, 
//the function pauses its execution and returns the yielded value. The next time 
//the generator function is called, it resumes execution from where it left off, continuing 
//until the next `yield` statement is encountered.

//Here's an example of a simple generator function that generates a sequence of numbers:


function* numberGenerator() {
  let number = 1;

  while (true) {
    yield number;
    number++;
  }
}


//In this example, the `numberGenerator` generator function uses a `while` loop to generate
//an infinite sequence of numbers. Each time the `yield` statement is reached, 
//the current value of `number` is returned, and the function is paused. The next time 
//the generator function is called, it resumes execution from where it left off and continues 
//incrementing `number`.

//To use a generator function, you need to create an iterator object using the generator function.
//You can do this by calling the generator function as if it were a regular function:


const generator = numberGenerator();


//The `generator` object is an iterator that can be used to iterate over the sequence of values 
//generated by the generator function. You can retrieve the next value from the iterator using the 
//`next()` method:


console.log(generator.next().value); // Output: 1
console.log(generator.next().value); // Output: 2
console.log(generator.next().value); // Output: 3



//Each call to `next()` returns an object with two properties: `value`, 
//which contains the yielded value, and `done`, which indicates whether the generator function
//has finished generating values.
//Eg: {value: 1, done: false}

//Generator functions provide a powerful tool for working with sequences and asynchronous 
//programming in JavaScript. They allow you to create custom iterable objects and control the 
//flow of execution in a more flexible and readable manner.